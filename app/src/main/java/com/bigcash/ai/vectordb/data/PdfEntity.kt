package com.bigcash.ai.vectordb.data

import io.objectbox.annotation.Entity
import io.objectbox.annotation.HnswIndex
import io.objectbox.annotation.Id
import io.objectbox.annotation.Index
import io.objectbox.annotation.VectorDistanceType
import java.util.Date

/**
 * Entity class representing a PDF document stored in ObjectBox database.
 * This entity contains the PDF file data, metadata, and vector embeddings.
 */
@Entity
data class PdfEntity(
    @Id var id: Long = 0,
    
    /**
     * Name of the PDF file (user-provided or extracted from file)
     */
    @Index var name: String = "",
    
    /**
     * Raw PDF file content as byte array
     */
    var data: String = "",
    
    /**
     * Vector embedding of the PDF content (simulated for now)
     * This would typically be generated by an AI model that processes the PDF text
     */
    @HnswIndex(
        dimensions = 768,
        distanceType = VectorDistanceType.COSINE
    )
    var embedding: FloatArray = floatArrayOf(),
    
    /**
     * File size in bytes
     */
    var fileSize: Long = 0L,
    
    /**
     * Timestamp when the PDF was uploaded/processed
     */
    var uploadDate: Date = Date(),
    
    /**
     * Optional description or tags for the PDF
     */
    var description: String = ""
) {
    /**
     * Override equals and hashCode to properly handle ByteArray and FloatArray comparisons
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PdfEntity

        if (id != other.id) return false
        if (name != other.name) return false
        if (!data.contentEquals(other.data)) return false
        if (!embedding.contentEquals(other.embedding)) return false
        if (fileSize != other.fileSize) return false
        if (uploadDate != other.uploadDate) return false
        if (description != other.description) return false

        return true
    }

    override fun hashCode(): Int {
        var result = id.hashCode()
        result = 31 * result + name.hashCode()
        result = 31 * result + data.hashCode()
        result = 31 * result + embedding.contentHashCode()
        result = 31 * result + fileSize.hashCode()
        result = 31 * result + uploadDate.hashCode()
        result = 31 * result + description.hashCode()
        return result
    }
}
